[{"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\index.js":"1","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\reportWebVitals.js":"2","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\App.js":"3","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Pages\\CoinDetail.js":"4","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Pages\\Dashboard.js":"5","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\Header.js":"6","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\AddCoin.js":"7","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\List.js":"8","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\api\\coinGecko.js":"9","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Context\\watchListContext.js":"10","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\Coin.js":"11","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Assets\\downIcon.js":"12","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\CoinInfo.js":"13","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\HistoryChart.js":"14","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\config\\chartConfig.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":633,"mtime":1611533258742,"results":"19","hashOfConfig":"17"},{"size":2144,"mtime":1611534861106,"results":"20","hashOfConfig":"17"},{"size":305,"mtime":1611533026965,"results":"21","hashOfConfig":"17"},{"size":208,"mtime":1611532574225,"results":"22","hashOfConfig":"17"},{"size":1402,"mtime":1611530969087,"results":"23","hashOfConfig":"17"},{"size":1488,"mtime":1611535118784,"results":"24","hashOfConfig":"17"},{"size":111,"mtime":1611362057658,"results":"25","hashOfConfig":"17"},{"size":894,"mtime":1611531804751,"results":"26","hashOfConfig":"17"},{"size":1317,"mtime":1611533653840,"results":"27","hashOfConfig":"17"},{"size":683,"mtime":1611368863416,"results":"28","hashOfConfig":"17"},{"size":2011,"mtime":1611529187065,"results":"29","hashOfConfig":"17"},{"size":2592,"mtime":1611527111104,"results":"30","hashOfConfig":"17"},{"size":381,"mtime":1611449366864,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ww7eyx",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\index.js",[],["67","68"],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\reportWebVitals.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\App.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Pages\\CoinDetail.js",["69"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CoinInfo from \"../Components/CoinInfo\";\r\nimport HistoryChart from \"../Components/HistoryChart\";\r\nimport coinGecko from \"../api/coinGecko\";\r\n\r\nfunction CoinDetail() {\r\n  const { id } = useParams();\r\n  const [coinData, setCoinData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // \r\n  const formatData = (data) => {\r\n    return data.map((el) => {\r\n      return {\r\n        t: el[0],\r\n        y: el[1].toFixed(2),\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const [day, week, year, detail] = await Promise.all([\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: \"usd\",\r\n            days: \"1\",\r\n          },\r\n        }),\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: \"usd\",\r\n            days: \"7\",\r\n          },\r\n        }),\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: \"usd\",\r\n            days: \"365\",\r\n          },\r\n        }),\r\n        coinGecko.get(\"/coins/markets/\", {\r\n          params: {\r\n            vs_currency: \"usd\",\r\n            ids: id,\r\n          },\r\n        }),\r\n      ]);\r\n      console.log(day);\r\n\r\n      setCoinData({\r\n        day: formatData(day.data.prices),\r\n        week: formatData(week.data.prices),\r\n        year: formatData(year.data.prices),\r\n        detail: detail.data[0],\r\n      });\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const renderData = () => {\r\n    if (isLoading) {\r\n      return <div class=\"load-wrapp\">\r\n      <div class=\"load-7\">\r\n        <p>Loading 7</p>\r\n        <div class=\"square-holder\">\r\n          <div class=\"square\"></div>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n    }\r\n    return (\r\n      <div className=\"coinlist\">\r\n        <HistoryChart data={coinData} />\r\n        <CoinInfo data={coinData.detail} />\r\n      </div>\r\n    );\r\n  };\r\n  return renderData();\r\n}\r\n\r\nexport default CoinDetail;\r\n","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Pages\\Dashboard.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\Header.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\AddCoin.js",["70"],"import React, { useContext, useState } from \"react\";\r\nimport { watchListContext } from \"../Context/watchListContext\";\r\n\r\nfunction AddCoin() {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const { addCoin } = useContext(watchListContext);\r\n\r\n  const availableCoins = [\r\n    \"bitcoin\",\r\n    \"ethereum\",\r\n    \"ripple\",\r\n    \"tether\",\r\n    \"bitcoin-cash\",\r\n    \"litecoin\",\r\n    \"eos\",\r\n    \"okb\",\r\n    \"tezos\",\r\n    \"cardano\",\r\n    \"monero\",\r\n    \"chainlink\",\r\n    \"xrp\",\r\n    \"aave\",\r\n    \"tether\",\r\n    \"polkadot\",\r\n    \"binancecoin\",\r\n    \"stellar\",\r\n    \"tron\",\r\n    \"iota\",\r\n    \"dash\",\r\n    \"basic-attention-token\",\r\n    \"crypto-com-chain\",\r\n    \"yearn-finance\",\r\n  ];\r\n\r\n  const handleClick = (coin) => {\r\n    addCoin(coin);\r\n    setIsActive(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <button\r\n        onClick={() => setIsActive(!isActive)}\r\n        className=\"btn btn-primary dropdown-toggle\"\r\n        type=\"button\"\r\n      >\r\n        Add Coin\r\n      </button>\r\n      <div className={isActive ? \"dropdown-menu show\" : \"dropdown-menu\"}>\r\n        {availableCoins.map((el) => {\r\n          return (\r\n            <a\r\n              onClick={() => handleClick(el)}\r\n              href=\"#\"\r\n              className=\"dropdown-item\"\r\n            >\r\n              {el}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddCoin;\r\n","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\List.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\api\\coinGecko.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Context\\watchListContext.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\Coin.js",["71"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport downIcon from \"../Assets/downIcon\";\r\nimport { AiFillCaretDown, AiFillCaretUp } from \"react-icons/ai\";\r\nimport { TiDeleteOutline } from \"react-icons/ti\";\r\n\r\nimport \"./Coin.css\";\r\n\r\nfunction Coin({ coin, deleteCoin }) {\r\n  return (\r\n    <Link to={`/coins/${coin.id}`} className=\"coin\">\r\n      <li className=\"coinlist__item\">\r\n        <img className=\"coinlist__image\" src={coin.image} alt=\"\" />\r\n        <span className=\"coinlist__name\">{coin.name}</span>\r\n        <span className=\"coinlist__symbol\">{coin.symbol}</span>\r\n        <span className=\"coinlist__price\">${coin.current_price}</span>\r\n        <span\r\n          className={\r\n            coin.price_change_percentage_24h < 0\r\n              ? \"difference__red\"\r\n              : \"difference__green\"\r\n          }\r\n        >\r\n          {\" \"}\r\n          {coin.price_change_percentage_24h < 0 ? (\r\n            <AiFillCaretDown />\r\n          ) : (\r\n            <AiFillCaretUp />\r\n          )}\r\n          {coin.price_change_percentage_24h}\r\n        </span>\r\n        <TiDeleteOutline\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            deleteCoin(coin.id);\r\n          }}\r\n          className=\"delete\"\r\n        />\r\n      </li>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Coin;\r\n","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Assets\\downIcon.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\CoinInfo.js",[],"C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\Components\\HistoryChart.js",["72"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Chartjs from \"chart.js\";\r\nimport { historyOptions } from \"../config/chartConfig\";\r\nimport \"./HistoryChart.css\";\r\n\r\n\r\n\r\nfunction HistoryChart({ data }) {\r\n  const chartRef = useRef();\r\n  const { day, week, year, detail } = data;\r\n  const [timeFormat, setTimeFormat] = useState(\"24h\");\r\n\r\n  const determineTimeFormat = () => {\r\n    switch (timeFormat) {\r\n      case \"24h\":\r\n        return day;\r\n      case \"7d\":\r\n        return week;\r\n      case \"1y\":\r\n        return year;\r\n      default:\r\n        return day;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      \r\n    //verify chartRef has a value - canvas has been rendered\r\n    if (chartRef && chartRef.current && detail) {\r\n      const chartInstance = new Chartjs(chartRef.current, {\r\n        type: \"line\",\r\n        data: {\r\n          datasets: [\r\n            {\r\n              label: `${detail.name} price`,\r\n              data: determineTimeFormat(),\r\n              backgroundColor: \"rgba(174, 305, 194, 0.5)\",\r\n              borderColor: \"rgba(174, 305, 194, 0.4\",\r\n              pointRadius: 0,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          legend: {\r\n            labels: {\r\n              // This more specific font property overrides the global property\r\n              fontColor: \"white\",\r\n              fontSize: 16,\r\n            },\r\n          },\r\n          ...historyOptions,\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  const renderPrice = () => {\r\n    if (detail) {\r\n      return (\r\n        <>\r\n          <p className=\"priceDetail\">${detail.current_price.toFixed(2)}</p>\r\n          <p\r\n            className={\r\n              detail.price_change_24h < 0\r\n                ? \"difference__red\"\r\n                : \"difference__green\"\r\n            }\r\n          >\r\n            {detail.price_change_percentage_24h.toFixed(2)}%\r\n          </p>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <div>{renderPrice()}</div>\r\n      <div>\r\n        <canvas ref={chartRef} id=\"myChart\" width={250} height={250}></canvas>\r\n      </div>\r\n      <div className=\"chart__buttons\">\r\n        <button\r\n          onClick={() => setTimeFormat(\"24h\")}\r\n          className=\"24h__button button\"\r\n        >\r\n          24h\r\n        </button>\r\n        <button onClick={() => setTimeFormat(\"7d\")} className=\"7d__button button\">\r\n          7d\r\n        </button>\r\n        <button onClick={() => setTimeFormat(\"1y\")} className=\"1y__button button\">\r\n          1y\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HistoryChart;\r\n","C:\\users\\sophi\\dev\\cryptowatch\\cryptowatch\\src\\config\\chartConfig.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":63,"column":6,"nodeType":"79","endLine":63,"endColumn":8,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":52,"column":13,"nodeType":"83","endLine":56,"endColumn":14},{"ruleId":"84","severity":1,"message":"85","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":16},{"ruleId":"84","severity":1,"message":"88","line":30,"column":13,"nodeType":"86","messageId":"87","endLine":30,"endColumn":26},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["91"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'downIcon' is defined but never used.","Identifier","unusedVar","'chartInstance' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [id]",{"range":"94","text":"95"},[1646,1648],"[id]"]